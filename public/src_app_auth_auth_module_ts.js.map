{"version":3,"file":"src_app_auth_auth_module_ts.js","mappings":"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","sources":["./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.module.ts","./src/app/auth/login/login.component.ts","./src/app/auth/login/login.component.html","./src/app/auth/register/register.component.ts","./src/app/auth/register/register.component.html"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport {LoginComponent} from './login/login.component';\nimport {NbAuthComponent} from '@nebular/auth';\nimport {RegisterComponent} from './register/register.component';\n\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: NbAuthComponent,\n    children: [\n      {\n        path: 'login',\n        component: LoginComponent,\n      },\n      {\n        path: 'register',\n        component: RegisterComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AuthRoutingModule { }\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {AuthRoutingModule} from './auth-routing.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {NbAlertModule, NbButtonModule, NbCardModule, NbCheckboxModule, NbInputModule} from '@nebular/theme';\nimport {RouterModule} from '@angular/router';\nimport {NbAuthModule} from '@nebular/auth';\nimport {LoginComponent} from './login/login.component';\nimport {RegisterComponent} from './register/register.component';\n\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    RegisterComponent,\n  ],\n  imports: [\n    CommonModule,\n    AuthRoutingModule,\n    CommonModule,\n    FormsModule,\n    RouterModule,\n    NbAlertModule,\n    NbInputModule,\n    NbButtonModule,\n    NbCheckboxModule,\n    NbAuthModule,\n    NbCardModule,\n    ReactiveFormsModule,\n  ],\n})\nexport class AuthModule {\n}\n","import {Component, OnInit} from '@angular/core';\nimport {AuthService} from '../services/auth.service';\nimport {FormBuilder, Validators} from '@angular/forms';\nimport {Router} from '@angular/router';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'ngx-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit {\n  public loginForm = this.formBuilder.group({\n    email: ['', [Validators.required, Validators.email]],\n    password: ['', [Validators.required, Validators.minLength(6)]],\n    rememberme: [false],\n\n  });\n\n  constructor(private authService: AuthService,\n              private formBuilder: FormBuilder,\n              private router: Router) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  login() {\n    this.authService.login(this.loginForm.value)\n      .subscribe((resp: any) => {\n          this.router.navigate(['/pages']);\n        },\n        err => {\n          Swal.fire('Oops...', err.error.message, 'error');\n        });\n  }\n\n}\n","<h1 class=\"title\" id=\"title\">Login</h1>\n<p class=\"sub-title\">Hello! Log in with your email.</p>\n\n<form (submit)=\"login()\"\n      [formGroup]=\"loginForm\"\n      aria-labelledby=\"title\"\n      autocomplete=\"off\">\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-email\">Email address:</label>\n    <input [status]=\"loginForm.get('email')?.invalid && loginForm.get('email').touched ? 'danger' : 'basic'\"\n           formControlName=\"email\" fullWidth\n           id=\"input-email\" name=\"email\" nbInput\n           placeholder=\"Email address\">\n    <ng-container *ngIf=\"loginForm.get('email')?.invalid && loginForm.get('email').touched\">\n      <p *ngIf=\"loginForm.get('email').errors?.required\" class=\"caption status-danger\">\n        Email is required!\n      </p>\n      <p *ngIf=\"loginForm.get('email').errors?.email\" class=\"caption status-danger\">\n        Email should be the real one!\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-password\">Password:</label>\n    <input [status]=\"loginForm.get('password')?.invalid && loginForm.get('password').touched ? 'danger' : 'basic'\"\n           formControlName=\"password\" fullWidth\n           id=\"input-password\" name=\"password\" nbInput placeholder=\"Password\"\n           type=\"password\">\n    <ng-container *ngIf=\"loginForm.get('password')?.invalid && loginForm.get('password').touched\">\n      <p *ngIf=\"loginForm.get('password').errors?.required\" class=\"caption status-danger\">\n        Password is required!\n      </p>\n      <p *ngIf=\"loginForm.get('password').errors?.minlength\" class=\"caption status-danger\">\n        The minimum of characters is 6!\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group accept-group\">\n    <nb-checkbox formControlName=\"rememberme\" name=\"rememberMe\">Remember me</nb-checkbox>\n  </div>\n\n  <button [disabled]=\"loginForm.invalid\" fullWidth nbButton status=\"success\" type=\"submit\">Sign In</button>\n</form>\n\n<section aria-label=\"Register\" class=\"another-action\">\n  Don't have an account? <a class=\"text-link\" routerLink=\"/auth/register\">Sign Up</a>\n</section>\n","import {Component, OnInit} from '@angular/core';\nimport {FormBuilder, Validators} from '@angular/forms';\nimport {AuthService} from '../services/auth.service';\nimport {Router} from '@angular/router';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'ngx-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss'],\n})\nexport class RegisterComponent implements OnInit {\n  public registerForm = this.formBuilder.group({\n    name: ['', Validators.required],\n    username: ['', Validators.required],\n    email: ['', [Validators.required, Validators.email]],\n    password: ['', [Validators.required, Validators.minLength(6)]],\n\n  });\n\n  constructor(private formBuilder: FormBuilder,\n              private authService: AuthService,\n              private router: Router) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  register() {\n    this.authService.register(this.registerForm.value)\n      .subscribe(resp => {\n          console.log(resp);\n          this.router.navigate(['/auth/login']);\n        },\n        err => {\n          Swal.fire('Oops...', err.error.message, 'error');\n        })\n    ;\n  }\n}\n","<h1 class=\"title\" id=\"title\">Register</h1>\n\n<form (submit)=\"register()\"\n      [formGroup]=\"registerForm\"\n      aria-labelledby=\"title\"\n      autocomplete=\"off\">\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-email\">Full name:</label>\n    <input autofocus formControlName=\"name\" fullWidth id=\"input-name\" name=\"name\" nbInput placeholder=\"Full name\">\n    <ng-container *ngIf=\"registerForm.get('name')?.invalid && registerForm.get('name').touched\">\n      <p *ngIf=\"registerForm.get('name').errors?.required\" class=\"caption status-danger\">\n        Full name is required!\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-email\">Username:</label>\n    <input formControlName=\"username\" fullWidth id=\"input-username\" name=\"username\" nbInput\n           placeholder=\"Username\">\n    <ng-container *ngIf=\"registerForm.get('username')?.invalid && registerForm.get('username').touched\">\n      <p *ngIf=\"registerForm.get('username').errors?.required\" class=\"caption status-danger\">\n        Username is required!\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-email\">Email address:</label>\n    <input formControlName=\"email\" fullWidth id=\"input-email\" name=\"email\" nbInput\n           placeholder=\"Email address\">\n    <ng-container *ngIf=\"registerForm.get('email')?.invalid && registerForm.get('email').touched\">\n      <p *ngIf=\"registerForm.get('email').errors?.required\" class=\"caption status-danger\">\n        Email is required!\n      </p>\n      <p *ngIf=\"registerForm.get('email').errors?.email\" class=\"caption status-danger\">\n        Email should be the real one!\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-password\">Password:</label>\n    <input formControlName=\"password\" fullWidth id=\"input-password\" name=\"password\" nbInput placeholder=\"Password\"\n           type=\"password\">\n    <ng-container *ngIf=\"registerForm.get('password')?.invalid && registerForm.get('password').touched\">\n      <p *ngIf=\"registerForm.get('password').errors?.required\" class=\"caption status-danger\">\n        Password is required!\n      </p>\n      <p *ngIf=\"registerForm.get('password').errors?.registerForm\" class=\"caption status-danger\">\n        The minimum of characters is 6!\n      </p>\n    </ng-container>\n  </div>\n\n  <button [disabled]=\"registerForm.invalid\" fullWidth nbButton status=\"success\" type=\"submit\">Sign In</button>\n</form>\n\n<section aria-label=\"Register\" class=\"another-action\">\n  Don't have an account? <a class=\"text-link\" routerLink=\"/auth/login\">Sign Up</a>\n</section>\n"],"names":[],"sourceRoot":"webpack:///"}