{"version":3,"file":"src_app_auth_auth_module_ts.js","mappings":"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","sources":["./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.module.ts","./src/app/auth/login/login.component.ts","./src/app/auth/login/login.component.html","./src/app/auth/register/register.component.ts","./src/app/auth/register/register.component.html"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport {LoginComponent} from './login/login.component';\nimport {RegisterComponent} from './register/register.component';\nimport {NbAuthComponent} from '@nebular/auth';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: NbAuthComponent,\n    children: [\n      {\n        path: 'login',\n        component: LoginComponent,\n      },\n      {\n        path: 'register',\n        component: RegisterComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AuthRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport {NbAlertModule, NbButtonModule, NbCheckboxModule, NbInputModule} from \"@nebular/theme\";\nimport {ReactiveFormsModule} from \"@angular/forms\";\n\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    RegisterComponent,\n  ],\n  imports: [\n    CommonModule,\n    AuthRoutingModule,\n    NbAlertModule,\n    ReactiveFormsModule,\n    NbCheckboxModule,\n    NbButtonModule,\n    NbInputModule,\n  ],\n})\nexport class AuthModule { }\n","import { Component, OnInit } from '@angular/core';\nimport {FormBuilder, Validators} from '@angular/forms';\nimport {AuthService} from '../services/auth.service';\nimport {Router} from '@angular/router';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'ngx-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit {\n  passwordRegex: string = '((?=.*\\d)(?=.*[a-zA-Z]).{4,20})';\n  remember: boolean = false;\n  submitted = false;\n  public loginForm = this.formBuilder.group({\n    email: ['', [Validators.required, Validators.pattern('.+@.+\\..+')]],\n    password: ['', [\n      Validators.required,\n      Validators.minLength(6),\n      Validators.maxLength(20)]],\n    rememberme: [],\n\n  });\n\n\n  constructor(private authService: AuthService,\n              private formBuilder: FormBuilder,\n              private router: Router) { }\n\n  ngOnInit(): void {\n    const email = localStorage.getItem('email') || '';\n    if (email.length > 1) {\n      this.remember = true;\n    }\n\n    this.loginForm = this.formBuilder.group({\n      email: [email, [Validators.required, Validators.pattern('.+@.+\\..+')]],\n      password: ['', [\n        Validators.required,\n        Validators.minLength(6),\n        Validators.maxLength(20)]],\n      rememberme: [this.remember],\n    });\n  }\n\n  login() {\n    if (this.loginForm.value.rememberme) {\n      localStorage.setItem('email', this.loginForm.value.email);\n    } else {\n      localStorage.removeItem('email');\n    }\n\n    this.authService.login(this.loginForm.value)\n      .subscribe((resp: any) => {\n          this.submitted = true;\n          this.router.navigate(['/domain']);\n        },\n        err => {\n          Swal.fire('Oops...', err.error.message, 'error');\n        });\n  }\n\n}\n","<h1 class=\"title\" id=\"title\">Login</h1>\n<p class=\"sub-title\">Hello! Log in with your email.</p>\n\n<nb-alert *ngIf=\"submitted\" outline=\"success\" role=\"alert\">\n  <p class=\"alert-title\"><b>Hooray!</b></p>\n  <ul class=\"alert-message-list\">\n    <li>Successfully logged in.</li>\n  </ul>\n</nb-alert>\n\n<form (submit)=\"login()\"\n      [formGroup]=\"loginForm\"\n      aria-labelledby=\"title\"\n      autocomplete=\"on\">\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-email\">Email address:</label>\n    <input [status]=\"loginForm.get('email')?.invalid && loginForm.get('email').touched ? 'danger' : 'basic'\"\n           formControlName=\"email\" fullWidth\n           id=\"input-email\" name=\"email\" nbInput\n           pattern=\".+@.+\\..+\"\n           placeholder=\"Email address\">\n    <ng-container *ngIf=\"loginForm.get('email')?.invalid && loginForm.get('email').touched\">\n      <p *ngIf=\"loginForm.get('email').errors?.required\" class=\"caption status-danger\">\n        Email is required!\n      </p>\n      <p *ngIf=\"loginForm.get('email').errors?.pattern\" class=\"caption status-danger\">\n        Email should be the real one!\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-password\">Password:</label>\n    <input [status]=\"loginForm.get('password')?.invalid && loginForm.get('password').touched ? 'danger' : 'basic'\"\n           formControlName=\"password\" fullWidth\n           id=\"input-password\" name=\"password\" nbInput placeholder=\"Password\"\n           type=\"password\">\n    <ng-container *ngIf=\"loginForm.get('password')?.invalid && loginForm.get('password').touched\">\n      <p *ngIf=\"loginForm.get('password').errors?.required\" class=\"caption status-danger\">\n        Password is required!\n      </p>\n      <p *ngIf=\"loginForm.get('password').errors?.minlength || loginForm.get('password').errors?.maxlength\"\n         class=\"caption status-danger\">\n        Password Must Contain(6-20)!\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group accept-group\">\n    <nb-checkbox formControlName=\"rememberme\" name=\"rememberMe\">Remember me</nb-checkbox>\n  </div>\n\n  <button [disabled]=\"loginForm.invalid\" fullWidth nbButton status=\"success\" type=\"submit\">Sign In</button>\n</form>\n\n<section aria-label=\"Register\" class=\"another-action\">\n  Don't have an account? <a class=\"text-link\" routerLink=\"/auth/register\">Sign Up</a>\n</section>\n","import {Component, OnInit} from '@angular/core';\nimport {FormBuilder, Validators} from '@angular/forms';\nimport {AuthService} from '../services/auth.service';\nimport {Router} from '@angular/router';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'ngx-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss'],\n})\nexport class RegisterComponent implements OnInit {\n  passwordRegex: string = '((?=.*\\d)(?=.*[a-zA-Z]).{4,20})';\n  public registerForm = this.formBuilder.group({\n    name: ['', Validators.required],\n    username: ['', Validators.required],\n    email: ['', [Validators.required, Validators.pattern('.+@.+\\..+')]],\n    password: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(20)]],\n\n  });\n\n  constructor(private formBuilder: FormBuilder,\n              private authService: AuthService,\n              private router: Router) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  register() {\n    this.authService.register(this.registerForm.value)\n      .subscribe(resp => {\n          this.router.navigate(['/auth/login']);\n        },\n        err => {\n          Swal.fire('Oops...', err.error.message, 'error');\n        })\n    ;\n  }\n\n}\n","<h1 class=\"title\" id=\"title\">Register</h1>\n\n<form (submit)=\"register()\"\n      [formGroup]=\"registerForm\"\n      aria-labelledby=\"title\"\n      autocomplete=\"off\">\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-email\">Full name:</label>\n    <input autofocus formControlName=\"name\" fullWidth id=\"input-name\" name=\"name\" nbInput placeholder=\"Full name\">\n    <ng-container *ngIf=\"registerForm.get('name')?.invalid && registerForm.get('name').touched\">\n      <p *ngIf=\"registerForm.get('name').errors?.required\" class=\"caption status-danger\">\n        Full name is required!\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-email\">Username:</label>\n    <input formControlName=\"username\" fullWidth id=\"input-username\" name=\"username\" nbInput\n           placeholder=\"Username\">\n    <ng-container *ngIf=\"registerForm.get('username')?.invalid && registerForm.get('username').touched\">\n      <p *ngIf=\"registerForm.get('username').errors?.required\" class=\"caption status-danger\">\n        Username is required!\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-email\">Email address:</label>\n    <input formControlName=\"email\" fullWidth id=\"input-email\" name=\"email\" nbInput\n           pattern=\".+@.+\\..+\"\n           placeholder=\"Email address\">\n    <ng-container *ngIf=\"registerForm.get('email')?.invalid && registerForm.get('email').touched\">\n      <p *ngIf=\"registerForm.get('email').errors?.required\" class=\"caption status-danger\">\n        Email is required!\n      </p>\n      <p *ngIf=\"registerForm.get('email').errors?.pattern\" class=\"caption status-danger\">\n        Email should be the real one!\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-password\">Password:</label>\n    <input formControlName=\"password\" fullWidth id=\"input-password\" name=\"password\" nbInput placeholder=\"Password\"\n           type=\"password\">\n    <ng-container *ngIf=\"registerForm.get('password')?.invalid && registerForm.get('password').touched\">\n      <p *ngIf=\"registerForm.get('password').errors?.required\" class=\"caption status-danger\">\n        Password is required!\n      </p>\n      <p *ngIf=\"registerForm.get('password').errors?.minlength || registerForm.get('password').errors?.maxlength\"\n         class=\"caption status-danger\">\n        Password Must Contain(6-20)!\n      </p>\n    </ng-container>\n  </div>\n\n  <button [disabled]=\"registerForm.invalid\" fullWidth nbButton status=\"success\" type=\"submit\">Sign In</button>\n</form>\n\n<section aria-label=\"Register\" class=\"another-action\">\n  Don't have an account? <a class=\"text-link\" routerLink=\"/auth/login\">Sign Up</a>\n</section>\n"],"names":[],"sourceRoot":"webpack:///"}